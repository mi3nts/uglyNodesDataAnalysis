
%% Multi-scale Integrated Sensing and Simulation (MINTS)
% Calibration - UglyBox Sensor - NLM Method 
% Auther: Lakitha Omal Harindha Wijeratne
% Date  : 30th of October 2018 
% -----------------------------------------------------


clc 
clear all 
close all 

nodeID     = "001e0610c2e5";
dataFolder = "../../../data"; 

%% Loading Training Data 
% loadUglyNodeTraining(nodeID,dataFolder,timeUnit,pm2_5CutOff)
AllData  = loadUglyNodeTraining(nodeID,dataFolder,60,100);

[trainTable,valTable,testTable] = trainTestSplitTable(AllData,.7,0,.3);

[trainingInput ,variableLabels] = getInputOPC(trainTable);

[testingInput ,variableLabels]  = getInputOPC(testTable);

%% Defining Bin Boudries 
binBoundries = [.75, 1.7 , 2.2 ,  2.7, 3.3,...
                3.8, 4.7 , 6.6 ,  8.5, 10.5,...
                13.4,16.4, 20.5, 24.8, 29.3,...
                34.4,40.0] ;  

%% radiusOut = getRadiusFromBinDiametor(bins)
radiusBins   =getRadiusFromBinDiametorBounds(binBoundries);

%% Defining Parametors

%% Generic Parametors 
pm(1).binBoundries = [.75, 1.7 , 2.2 ,  2.7, 3.3,...
                3.8, 4.7 , 6.6 ,  8.5, 10.5,...
                13.4,16.4, 20.5, 24.8, 29.3,...
                34.4,40.0] ; 

pm(1).dataFolder = "../../../data"; 

pm(1).radiusBins   =getRadiusFromBinDiametorBounds(binBoundries);


%% For pm1 
pm(1).name  = "PM 1";
pm(1).label = "pm1";
pm(1).modelFunction = ...
           @(b,x)b(1)*x(:,1)*(radiusBins(1)^3)+...
                 b(2)*x(:,2)*(radiusBins(2)^3);

pm(1).InitialEstimate = [1 1];
pm(1).radiusTaken= radiusBins(1:2)
pm(1).nlmID = "nlmPm1BinsOnly"




%% For pm2.5 
pm(2).name  = "PM 2.5";
pm(2).label = "pm2_5";
pm(2).modelFunction = ...
           @(b,x)b(1)*x(:,1)*(radiusBins(1)^3)+...
                 b(2)*x(:,2)*(radiusBins(2)^3)+...
                 b(3)*x(:,3)*(radiusBins(3)^3)+...
                 b(4)*x(:,4)*(radiusBins(4)^3);

pm(2).InitialEstimate = [1 1 1 1];
pm(2).radiusTaken= radiusBins(1:4)
pm(2).nlmID = "nlmPm2_5BinsOnly"


%% For pm10
pm(3).name  = "PM 10";
pm(3).label = "pm10";
pm(3).modelFunction = ...
           @(b,x)b(1)*x(:,1)*(radiusBins(1)^3)+...
                 b(2)*x(:,2)*(radiusBins(2)^3)+...
                 b(3)*x(:,3)*(radiusBins(3)^3)+...
                 b(4)*x(:,4)*(radiusBins(4)^3)+...
                 b(5)*x(:,5)*(radiusBins(5)^3)+...
                 b(6)*x(:,6)*(radiusBins(6)^3)+...
                 b(7)*x(:,7)*(radiusBins(7)^3)+...
                 b(8)*x(:,8)*(radiusBins(8)^3)+...
                 b(9)*x(:,9)*(radiusBins(9)^3)+...
                 b(10)*x(:,10)*(radiusBins(10)^3);

pm(3).InitialEstimate = [1 1 1 1 1 1 1 1 1 1];
pm(3).radiusTaken = radiusBins(1:10)
pm(3).nlmID = "nlmPm10BinsOnly"





for n=1:3

  eval(strcat("inputTraining = binsAnd",pm(n).label,"(trainTable);"));
  eval(strcat("inputTesting  = binsAnd",pm(n).label,"(testTable);"));

  mdl = fitnlm(inputTraining,pm(n).modelFunction,pm(n).InitialEstimate) 
 
%% Saving the Data 
% dataSaver(nodeID,fileName,variableName,path,inVariable)
dataSaver(nodeID,pm(n).nlmID,"mdl","predictors",mdl);

%% Getting the Prediction
% prediction = nlmPredictor(mdl,inputFormat,radius)
predictionTraining = nlmPredictor(mdl,...
                                      inputTraining(:,1:end-1),...
                                      pm(n).radiusTaken);
predictionTesting  = nlmPredictor(mdl,...
                                      inputTesting(:,1:end-1),...
                                      pm(n).radiusTaken);
                               
%% Plotters

% scatterPlotter1x(xData,yData,xLimit,yLimit,xLabel,yLabel,nodeID
% ,estimator,titlePre,saveNamePre,dataFolder)
scatterPlotter1x(...
     table2array(inputTraining(:,end)),...
     predictionTraining,...
     100,...
     100,...
     "Grimm Sensor",...
     "Linear Regression Prediction",...
     nodeID, ...
     pm(n).name,...
      pm(n).label,...
     "Linear Regression Prediction - Training - Bins as Inputs",...
     strcat(pm(n).label,"LinearRegressionPredictionTrainingBins"),...
     dataFolder);

scatterPlotter1x(...
     table2array(inputTesting(:,end)),...
     predictionTesting,...
     100,...
     100,...
     "Grimm Sensor",...
     "Linear Regression Prediction",...
     nodeID, ...
     pm(n).name,...
     pm(n).label,...
     "Linear Regression Prediction - Testing - Bins as Inputs",...
     strcat(pm(n).label,"LinearRegressionPredictionTestingBins"),...
     dataFolder);



end


 dataSaver(nodeID,"rawData","pm","rawData",pm);