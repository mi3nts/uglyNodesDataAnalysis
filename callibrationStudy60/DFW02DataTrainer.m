% 
% clc 
 clear all 
close all 
% 
nodeID     = "001e0610c2e5";
dataFolder = "../../../data"; 

% loadUglyNodeTraining(nodeID,dataFolder,timeUnit,pm2_5CutOff)

AllData  = loadUglyNodeTraining(nodeID,dataFolder,60,100);

[trainTable,valTable,testTable] = trainTestSplitTable(AllData,.7,0,.3);

[trainingInput ,variableLabels] = getInputOPC(trainTable);

[testingInput ,variableLabels]  = getInputOPC(testTable);


binBoundries = [.75, 1.7 , 2.2 ,  2.7, 3.3,...
                3.8, 4.7 , 6.6 ,  8.5, 10.5,...
                13.4,16.4, 20.5, 24.8, 29.3,...
                34.4,40.0] ;  

%% radiusOut = getRadiusFromBinDiametor(bins)
radiusOut   =getRadiusFromBinDiametorBounds(binBoundries);

%% tableOut = getBincounts(inputTable,upToBinIndex)
% bins start from index 0 
pm10InputNLMTrain =  binsAndPM10(trainTable);
pm10InputNLMTest  =  binsAndPM10(testTable);

modelFun = @(b,x)b(1)*x(:,1)*(radiusOut(1)^3)+...
                 b(2)*x(:,2)*(radiusOut(2)^3)+...
                 b(3)*x(:,3)*(radiusOut(3)^3)+...
                 b(4)*x(:,4)*(radiusOut(4)^3)+...
                 b(5)*x(:,5)*(radiusOut(5)^3)+...
                 b(6)*x(:,6)*(radiusOut(6)^3)+...
                 b(7)*x(:,7)*(radiusOut(7)^3)+...
                 b(8)*x(:,8)*(radiusOut(8)^3)+...
                 b(9)*x(:,9)*(radiusOut(9)^3)+...
                 b(10)*x(:,10)*(radiusOut(10)^3);

InitialEstimate = [1 1 1 1 1 1 1 1 1 1];

Mdl = fitnlm(pm10InputNLMTrain,modelFun,InitialEstimate) 

%%Saving the Data 
% dataSaver(nodeID,fileName,variableName,path,inVariable)
dataSaver(nodeID,"nlmOPCPM10","Mdl","predictors",Mdl);



%% Getting the Prediction
% prediction = nlmPredictor(mdl,inputFormat,radius)

pm10PredictionwithBinsTrain = nlmPredictor(Mdl,...
                                      pm10InputNLMTrain(:,1:end-1),...
                                      radiusOut(1:10));
pm10PredictionwithBinsTest  = nlmPredictor(Mdl,...
                                      pm10InputNLMTest(:,1:end-1),...
                                      radiusOut(1:10));
                                  
%% Plot Scatter 
% Results= scatterPlotter1x(xData,yData,xLimit,yLimit,xLabel,yLabel,nodeID
% ,estimator,titlePre,saveNamePre,dataFolder)
% Results = table(nodeID,RValue,RMSE,A1,A2);

scatterPlotter1x(...
     table2array(pm10InputNLMTrain(:,end)),...
     pm10PredictionwithBinsTrain,...
     100,...
     100,...
     "Grimm Sensor",...
     "Linear Regression Prediction",...
     nodeID, ...
     "PM 10",...
     "Linear Regression Prediction - Training - Bins as Inputs",...
     strcat("pm10LinearRegressionPredictionTrainingBins"),...
     dataFolder);

scatterPlotter1x(...
     table2array(pm10InputNLMTest(:,end)),...
     pm10PredictionwithBinsTest,...
     100,...
     100,...
     "Grimm Sensor",...
     "Linear Regression Prediction",...
     nodeID, ...
     "PM 10",...
     "Linear Regression Prediction - Testing - Bins as Inputs",...
     strcat("pm10LinearRegressionPredictionTestingBins"),...
     dataFolder);


%% Getting the Prediction


dataFolder = "../../../data"; 
tStart = datetime(2018,10,1);
tEnd   = datetime(2018,10,20);

nodeID =  "001e0610c2e5"


uglyNodeData        = getUglyNodeData(tStart,tEnd,nodeID);

uglyNodeDataPredict = tableMixerUglyNode(uglyNodeData);


%% Load The Classifier 



%% 


pm10PredictionCurrent = nlmPredictor(Mdl,...
                                      uglyNodeDataPredict(:,1:10),...
                                      radiusOut(1:10));
%%   








% trainingDataNow = pm2_5Bins(trainingDataReduced);
% % PM 2.5

% 
% 
% 
% 
% loopLabels = ["PM1","PM2.5","PM10"  ]
% loopNames  = [ "pm1","pm2_5","pm10"]
% 
% for loopIndex = 1:length(loopNames)
%     
% eval(strcat("trainingTarget = trainTable.",loopNames(loopIndex),"_Spectrometor;"));  
% eval(strcat("testingTarget  = testTable.",loopNames(loopIndex),"_Spectrometor;"));  
% 
% 
% %% Training Data 
% 
% Mdl=fitrensemble(...
%    	trainingInput,...
%     trainingTarget,...
% 'OptimizeHyperparameters','all',...
% 'HyperparameterOptimizationOptions',...
% struct('UseParallel',true,'ShowPlots',true));
% 
% 
% eval(strcat('dataSaver(nodeID,"',loopNames(loopIndex),'BoostedTree","Mdl","predictors",Mdl);'));
% 
% 
% % Getiing the Prediction 
% trainingPrediction  = predict(Mdl,trainingInput)';
% testingPrediction   = predict(Mdl,testingInput)';
%  
% % Having the Importaince 
% predictorImportaince = predictorImportance(Mdl);
%  
% 
% % plotImportaince(predictorImportaince,variableLabels,nodeID,estimator,titlePost,saveNamePre,dataFolder)
% 
% plotImportaince(...
%     predictorImportaince,...
%     variableLabels,...
%     nodeID,...
%     loopLabels(loopIndex),...
%     "Using All Inputs",...
%     strcat(loopNames(loopIndex),"AllInputs"),...
%     dataFolder)
% % 
% %  
% scatterPlotter1x(...
%      trainingTarget,...
%      trainingPrediction',...
%      1000,...
%      1000,...
%      "Alpha Sensor",...
%      "Boosted Tree",...
%      nodeID, ...
%      loopLabels(loopIndex),...
%      "Boosted Tree Prediction - Training - All Inputs",...
%      strcat(loopNames(loopIndex),"BoostedTreeTrainingAllInputs"),...
%      dataFolder);
% % 
% % 
% % 
% % scatterPlotter1x(...
% %      testingTarget,...
% %      testingPrediction',...
% %      1000,...
% %      1000,...
% %      "Alpha Sensor",...
% %      "Boosted Tree",...
% %      nodeID, ...
% %      loopLabels(loopIndex),...
% %      "Boosted Tree Prediction - Testing - All Inputs",...
% %      strcat(loopNames(loopIndex),"BoostedTreeTestingAllInputs"),...
% %      dataFolder);
% % 
% % end
