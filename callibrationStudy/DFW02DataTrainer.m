% 
% clc 
% clear all 
close all 
% 
nodeID     = "001e0610c2e5";
dataFolder = "../../../data"; 

AllData  = loadUglyNodeTraining(nodeID,dataFolder);

[trainTable,valTable,testTable] = trainTestSplitTable(AllData,.7,0,.3);

trainingInput =  [ trainTable.opc_n2_bin0,...
                   trainTable.opc_n2_bin1,...
                   trainTable.opc_n2_bin2,...
                   trainTable.opc_n2_bin3,...
                   trainTable.opc_n2_bin4,...
                   trainTable.opc_n2_bin5,...
                   trainTable.opc_n2_bin6,...
                   trainTable.opc_n2_bin7,...
                   trainTable.opc_n2_bin8,...
                   trainTable.opc_n2_bin9,...
                   trainTable.opc_n2_bin10,...
                   trainTable.opc_n2_bin11,...
                   trainTable.opc_n2_bin12,...
                   trainTable.opc_n2_bin13,...
                   trainTable.opc_n2_bin14,...
                   trainTable.opc_n2_bin15,...
                   trainTable.opc_n2_pm1,...
                   trainTable.opc_n2_pm2_5,...
                   trainTable.opc_n2_pm10,...
                   trainTable.htu21d_humidity,...
                   trainTable.htu21d_temperature,...
                   trainTable.bmp180_pressure,...
                   trainTable.bmp180_temperature];
               
testingInput =  [ testTable.opc_n2_bin0,...
                   testTable.opc_n2_bin1,...
                   testTable.opc_n2_bin2,...
                   testTable.opc_n2_bin3,...
                   testTable.opc_n2_bin4,...
                   testTable.opc_n2_bin5,...
                   testTable.opc_n2_bin6,...
                   testTable.opc_n2_bin7,...
                   testTable.opc_n2_bin8,...
                   testTable.opc_n2_bin9,...
                   testTable.opc_n2_bin10,...
                   testTable.opc_n2_bin11,...
                   testTable.opc_n2_bin12,...
                   testTable.opc_n2_bin13,...
                   testTable.opc_n2_bin14,...
                   testTable.opc_n2_bin15,...
                   testTable.opc_n2_pm1,...
                   testTable.opc_n2_pm2_5,...
                   testTable.opc_n2_pm10,...
                   testTable.htu21d_humidity,...
                   testTable.htu21d_temperature,...
                   testTable.bmp180_pressure,...
                   testTable.bmp180_temperature];  
               
variableLabels =  [         "Bin 0",...
                            "Bin 1",...
                            "Bin 2",...
                            "Bin 3",...
                            "Bin 4",...
                            "Bin 5",...
                            "Bin 6",...
                            "Bin 7",...
                            "Bin 8",...
                            "Bin 9",...
                            "Bin 10",...
                            "Bin 11",...
                            "Bin 12",...
                            "Bin 13",...
                            "Bin 14",...
                            "Bin 15",...
                            "PM 1",...
                            "PM 2.5",...
                            "PM 10",...
                            "HTU21D10 Humidty",...
                            "HTU21D10 Temperature",...
                            "BMP280 Pressure",...
                            "BMP280 Temperature"
                            ];


loopLabels = ["PM1","PM2.5","PM10"  ]
loopNames  = [ "pm1","pm2_5","pm10"]

for loopIndex = 1:length(loopNames)
    
eval(strcat("trainingTarget = trainTable.",loopNames(loopIndex),"_Spectrometor;"));  
eval(strcat("testingTarget  = testTable.",loopNames(loopIndex),"_Spectrometor;"));  


%% Training Data 

Mdl=fitrensemble(...
   	trainingInput,...
    trainingTarget,...
'OptimizeHyperparameters','all',...
'HyperparameterOptimizationOptions',...
struct('UseParallel',true,'ShowPlots',true));


eval(strcat('dataSaver(nodeID,"',loopNames(loopIndex),'BoostedTree","Mdl","predictors",Mdl);'));


% Getiing the Prediction 
trainingPrediction  = predict(Mdl,trainingInput)';
testingPrediction   = predict(Mdl,testingInput)';
 
% Having the Importaince 
predictorImportaince = predictorImportance(Mdl);
 

% plotImportaince(predictorImportaince,variableLabels,nodeID,estimator,titlePost,saveNamePre,dataFolder)

plotImportaince(...
    predictorImportaince,...
    variableLabels,...
    nodeID,...
    loopLabels(loopIndex),...
    "Using All Inputs",...
    strcat(loopNames(loopIndex),"AllInputs"),...
    dataFolder)

 
scatterPlotter1x(...
     trainingTarget,...
     trainingPrediction',...
     1000,...
     1000,...
     "Alpha Sensor",...
     "Boosted Tree",...
     nodeID, ...
     loopLabels(loopIndex),...
     "Boosted Tree Prediction - Training - All Inputs",...
     strcat(loopNames(loopIndex),"BoostedTreeTrainingAllInputs"),...
     dataFolder);



scatterPlotter1x(...
     testingTarget,...
     testingPrediction',...
     1000,...
     1000,...
     "Alpha Sensor",...
     "Boosted Tree",...
     nodeID, ...
     loopLabels(loopIndex),...
     "Boosted Tree Prediction - Testing - All Inputs",...
     strcat(loopNames(loopIndex),"BoostedTreeTestingAllInputs"),...
     dataFolder);

end
